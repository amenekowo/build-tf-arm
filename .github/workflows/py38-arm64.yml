name: py38-arm64

on:
  push:
    branches:
    - master
    - test
  workflow_dispatch:
  
jobs:
  build_tf:
    name: Building python3.8 Tensorflow for arm64
    runs-on: ubuntu-20.04
    
    env:
      TF_PYTHON_VERSION: 3.8
      TF_VERSION: v1.14.0
      build_variant: ${{ matrix.build_variant }}
      targets: ${{ matrix.targets }}
      work_dir: /tmp/tf_build
      bin_dir: /tmp/tensorflow_pkg
      
    strategy:
      matrix:
        include:
          - build_variant: "arm64"
            targets: "rk3399"
    steps:
      - uses: actions/checkout@v2
      - name: Prepare environment for building
        run: |
          mkdir ${{ env.work_dir }}
          cd ${{ env.work_dir }}
          sudo dpkg --add-architecture arm64
          sudo sed -i 's/deb/deb [arch=amd64]/g' /etc/apt/sources.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ focal main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ focal-updates main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ focal-backports main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ focal-security main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list        
          sudo apt update
          
          sudo apt -y install openjdk-8-jdk automake autoconf
          sudo apt -y install curl zip unzip libtool swig libpng-dev zlib1g-dev pkg-config git g++ wget xz-utils
          sudo apt -y install python3-numpy python3-dev python3-pip python3-mock
          
          sudo apt -y install libpython3-all-dev:arm64
          
          pip3 install -U --user keras_applications==1.0.8 --no-deps
          pip3 install -U --user keras_preprocessing==1.1.0 --no-deps
          pip3 install portpicker
          
          git clone https://github.com/lhelontra/tensorflow-on-arm
          cd tensorflow-on-arm
          git checkout ${{ env.TF_VERSION }}
          
      - name: Run build
        run: |
          cd ${{ env.work_dir }}
          cd tensorflow-on-arm/build_tensorflow
          chmod +x build_tensorflow.sh
          for m in $targets
          do 
            source configs/$m.conf
            wget "https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh"
            sudo bash ./bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh
            TF_PYTHON_VERSION=${{ env.TF_PYTHON_VERSION }} ./build_tensorflow.sh configs/$m.conf
          done
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v2.2.1
        with:
          name: tf-py3.8-arm64
          path: ${{ env.bin_dir }}/*
